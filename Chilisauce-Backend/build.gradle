plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'jacoco'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10' // QueryDSL 플러그인 추가
	id 'com.google.cloud.tools.jib' version '3.4.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

jar {
	enabled = false
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'com.vaadin.external.google', module: 'android-json'
	}

	testImplementation 'org.springframework.security:spring-security-test'
	runtimeOnly 'com.mysql:mysql-connector-j'

	//validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation group: 'org.json', name: 'json', version: '20230227'

	//Jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	//Mockito
	testImplementation 'org.mockito:mockito-core:4.8.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'

	//mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// swagger openapi
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.11'

	// spring rest docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.7.RELEASE'

	// object mapper
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'
	//Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	//RateLimitJ
	implementation 'es.moki.ratelimitj:ratelimitj-inmemory:0.5.0'
	//QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0' // Querydsl JPA
	implementation 'com.querydsl:querydsl-apt:5.0.0' // Querydsl APT

}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	useJUnitPlatform()
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacoco.exec")
	}
	outputs.dir snippetsDir
	finalizedBy jacocoTestReport
}

asciidoctor {
	dependsOn test
	configurations 'asciidoctorExt'
	inputs.dir snippetsDir

	baseDirFollowsSourceFile()
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

jacoco {
	toolVersion = "0.8.8"
}

jacocoTestReport {
	dependsOn test

	reports {
		html.enabled true
		xml.enabled true
		csv.enabled true

		html.destination file("${buildDir}/jacoco/index.html")
		xml.destination file("${buildDir}/jacoco/index.csv")
		csv.destination file("${buildDir}/jacoco/index.xml")
	}

	getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/jacoco.exec"))

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: coverageExcludePath())
				})
		)
	}

	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/jacoco.exec"))

	violationRules {
		rule {
			enabled = true
			element = 'BUNDLE'
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0
			}
			excludes += coverageExcludeClasses()
		}
	}
}

// jacocoTestReport 제외 경로
static def coverageExcludePath() {
	def qPath = []
	for (qPattern in "**/QA".."**/QZ"){
		qPath.add(qPattern + "*")
	}

	return [ "**/*Config*",
			 "**/*Application*",
			 "**/dto/**",
			 "**/healthcheck/**"] + qPath
}

// jacocoTestCoverageVerification 제외 클래스
static def coverageExcludeClasses() {
	def qClasses = []
	for (qPattern in "*.*QA".."*.*QZ"){
		qClasses.add(qPattern + "*")
	}

	return [ "*.*Config*",
			 "*.*Application",
			 "*.dto.*",
			 "*.healthcheck.*"] + qClasses
}


// querydsl 설정 추가
def querydslDir = "$buildDir/generated/querydsl" // Q 클래스 생성을 위한 경로 설정

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

build {
	dependsOn copyDocument
}

jib {
	from {
		image = "openjdk:17"
	}
	to {
		image = "0892668/chilisauce-be"
		tags = ['latest', '0.0.2']
	}
	container {
		creationTime ="USE_CURRENT_TIMESTAMP"
	}
}